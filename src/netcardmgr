#!/usr/bin/env python3.7
#
# Copyright (c) 2013-2019, GhostBSD All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistribution's of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistribution's in binary form must reproduce the above
#    copyright notice,this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: netcardmgr.py v 0.1 Saturday, February 08 2014 Eric Turgeon $

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GObject, GLib
from subprocess import Popen, PIPE
import os
import re
import sys
from time import sleep

ncard = 'ifconfig -l'
nics = Popen(ncard, shell=True, stdout=PIPE, close_fds=True,
             universal_newlines=True)
netcard = nics.stdout.readlines()[0].rstrip()
wifis = 'sysctl -in net.wlan.devices'
wifinics = Popen(wifis, shell=True, stdout=PIPE, close_fds=True,
                 universal_newlines=True)
wifiscard = wifinics.stdout.readlines()[0].rstrip()
rcconf = open('/etc/rc.conf', 'r').read()

notnics = ["lo", "fwe", "fwip", "tap", "plip", "pfsync", "pflog",
           "tun", "sl", "faith", "ppp", "wlan", "brige", "ixautomation"]

cmd = "kenv | grep rc_system"
rc_system = Popen(cmd, shell=True, stdout=PIPE, universal_newlines=True)
if 'openrc' in rc_system.stdout.read():
    openrc = True
    rc = 'rc-'
    network = 'network'
else:
    openrc = False
    rc = ''
    network = 'netif'

restart_network = f'doas {rc}service {network} restart'


class autoConfigure():

    def __init__(self):
        for line in netcard.split():
            card = line.rstrip()
            nc = re.sub(r'\d+', '', line.rstrip())
            if nc not in notnics:
                if f'ifconfig_{card}=' in rcconf:
                    print("Your wired network card is already configured.")
                else:
                    rc = open('/etc/rc.conf', 'a')
                    rc.writelines(f'ifconfig_{card}="DHCP"\n')
                    rc.close()
                    sleep(1)
                    os.system(restart_network)
                    sleep(1)
                    if os.path.exists("/sbin/openrc") is True:
                        cmd = f"doas rc-service dhcpcd.{card} restart"
                        os.system(cmd)
                    print("Your wired network card is configured.")

        for card in wifiscard.split():
            for wlanNum in range(0, 9):
                if f'wlan{wlanNum}' not in rcconf:
                    break
            if f'wlans_{card}=' in rcconf:
                print("Your wifi network card is already configured.")
                if not os.path.exists('/etc/wpa_supplicant.conf'):
                    open('/etc/wpa_supplicant.conf', 'a').close()
                    os.system('chown root:wheel /etc/wpa_supplicant.conf')
                    os.system('chmod 765 /etc/wpa_supplicant.conf')
                else:
                    os.system('chown root:wheel /etc/wpa_supplicant.conf')
                    os.system('chmod 765 /etc/wpa_supplicant.conf')
            else:
                rc = open('/etc/rc.conf', 'a')
                rc.writelines(f'wlans_{card}="wlan{wlanNum}"\n')
                rc.writelines(f'ifconfig_wlan{wlanNum}="WPA DHCP"\n')
                rc.close()
                if not os.path.exists('/etc/wpa_supplicant.conf'):
                    open('/etc/wpa_supplicant.conf', 'a').close()
                    os.system('chown root:wheel /etc/wpa_supplicant.conf')
                    os.system('chmod 765 /etc/wpa_supplicant.conf')
                sleep(1)
                os.system(restart_network)
                sleep(1)
                nicslist = 'ifconfig -l'
                ifconfig = Popen(nicslist, shell=True, stdout=PIPE,
                                 close_fds=True, universal_newlines=True)
                cardlist = ifconfig.stdout.read()
                if f'wlan{wlanNum}' not in cardlist:
                    sleep(1)
                    os.system(restart_network)
                    sleep(1)
                os.system(f'ifconfig wlan{wlanNum} up scan')
                os.system(f'ifconfig wlan{wlanNum} up scan')
                sleep(1)
            wlanNum += 1

class netCardConfigWindow(Gtk.Window):

    def __init__(self):
        # Build Default Window
        Gtk.Window.__init__(self, title="Network Interface Configuration")
        self.set_default_size(600,400)

        # Build Tab 1 Content
        testbutton = Gtk.Button(label="IPv4 Stuff")
        testbutton.connect("clicked", self.on_button_clicked)

        # Build Tab 2 Content
        testbutton2 = Gtk.Button(label="IPv6 Stuff")
        testbutton2.connect("clicked", self.on_button_clicked)

        # Build Tab 3 Content
        testbutton3 = Gtk.Button(label="VPN Stuff")
        testbutton3.connect("clicked", self.on_button_clicked)

        # Build Notebook
        nb = Gtk.Notebook()
        nb.set_tab_pos(2)
        self.add(nb)

        # Apply Tab 1 content and formatting
        nb.append_page(testbutton)
        nb.set_tab_label_text(testbutton, "IPv4 Settings")

        # Apply Tab 2 content and formatting
        nb.append_page(testbutton2)
        nb.set_tab_label_text(testbutton2, "IPv6 Settings")

        # Apply Tab 3 content and formatting
        nb.append_page(testbutton3)
        nb.set_tab_label_text(testbutton3, "VPN")

    def on_button_clicked(self, widget):
        print(f"Hello World")

def openNetCardConfigwindow():
    win = netCardConfigWindow()
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()

if "-auto" in sys.argv:
    autoConfigure()
elif "-configure" in sys.argv:
    openNetCardConfigwindow()
else:
    print(f"No acceptable flags were passed to the function.")