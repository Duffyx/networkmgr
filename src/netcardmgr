#!/usr/bin/env python3.7
#
# Copyright (c) 2013-2019, GhostBSD All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistribution's of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistribution's in binary form must reproduce the above
#    copyright notice,this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: netcardmgr.py v 0.1 Saturday, February 08 2014 Eric Turgeon $

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GObject, GLib
from subprocess import Popen, PIPE
import os
import re
import sys
from time import sleep

ncard = 'ifconfig -l'
nics = Popen(ncard, shell=True, stdout=PIPE, close_fds=True,
             universal_newlines=True)
netcard = nics.stdout.readlines()[0].rstrip()
wifis = 'sysctl -in net.wlan.devices'
wifinics = Popen(wifis, shell=True, stdout=PIPE, close_fds=True,
                 universal_newlines=True)
wifiscard = wifinics.stdout.readlines()[0].rstrip()
rcconf = open('/etc/rc.conf', 'r').read()

notnics = ["lo", "fwe", "fwip", "tap", "plip", "pfsync", "pflog",
           "tun", "sl", "faith", "ppp", "wlan", "bridge", "ixautomation"]

cmd = "kenv | grep rc_system"
rc_system = Popen(cmd, shell=True, stdout=PIPE, universal_newlines=True)
if 'openrc' in rc_system.stdout.read():
    openrc = True
    rc = 'rc-'
    network = 'network'
else:
    openrc = False
    rc = ''
    network = 'netif'

restart_network = f'doas {rc}service {network} restart'


class autoConfigure():

    def __init__(self):
        for line in netcard.split():
            card = line.rstrip()
            nc = re.sub(r'\d+', '', line.rstrip())
            if nc not in notnics:
                if f'ifconfig_{card}=' in rcconf:
                    print("Your wired network card is already configured.")
                else:
                    rc = open('/etc/rc.conf', 'a')
                    rc.writelines(f'ifconfig_{card}="DHCP"\n')
                    rc.close()
                    sleep(1)
                    os.system(restart_network)
                    sleep(1)
                    if os.path.exists("/sbin/openrc") is True:
                        cmd = f"doas rc-service dhcpcd.{card} restart"
                        os.system(cmd)
                    print("Your wired network card is configured.")

        for card in wifiscard.split():
            for wlanNum in range(0, 9):
                if f'wlan{wlanNum}' not in rcconf:
                    break
            if f'wlans_{card}=' in rcconf:
                print("Your wifi network card is already configured.")
                if not os.path.exists('/etc/wpa_supplicant.conf'):
                    open('/etc/wpa_supplicant.conf', 'a').close()
                    os.system('chown root:wheel /etc/wpa_supplicant.conf')
                    os.system('chmod 765 /etc/wpa_supplicant.conf')
                else:
                    os.system('chown root:wheel /etc/wpa_supplicant.conf')
                    os.system('chmod 765 /etc/wpa_supplicant.conf')
            else:
                rc = open('/etc/rc.conf', 'a')
                rc.writelines(f'wlans_{card}="wlan{wlanNum}"\n')
                rc.writelines(f'ifconfig_wlan{wlanNum}="WPA DHCP"\n')
                rc.close()
                if not os.path.exists('/etc/wpa_supplicant.conf'):
                    open('/etc/wpa_supplicant.conf', 'a').close()
                    os.system('chown root:wheel /etc/wpa_supplicant.conf')
                    os.system('chmod 765 /etc/wpa_supplicant.conf')
                sleep(1)
                os.system(restart_network)
                sleep(1)
                nicslist = 'ifconfig -l'
                ifconfig = Popen(nicslist, shell=True, stdout=PIPE,
                                 close_fds=True, universal_newlines=True)
                cardlist = ifconfig.stdout.read()
                if f'wlan{wlanNum}' not in cardlist:
                    sleep(1)
                    os.system(restart_network)
                    sleep(1)
                os.system(f'ifconfig wlan{wlanNum} up scan')
                os.system(f'ifconfig wlan{wlanNum} up scan')
                sleep(1)
            wlanNum += 1

class netCardConfigWindow(Gtk.Window):

    def __init__(self, defaultactiveint):
        # Build Default Window
        Gtk.Window.__init__(self, title="Network Interface Configuration")
        self.set_default_size(475,450)

        # Build Tab 1 Content

        # Interface Drop Down Combo Box
        cell = Gtk.CellRendererText()

        interfaceComboBox = Gtk.ComboBox()
        interfaceComboBox.pack_start(cell, expand=True)
        interfaceComboBox.add_attribute(cell, 'text', 0)

        # Add interfaces to a ListStore
        store = Gtk.ListStore(str)
        validinterfaces = self.enumerate_nics()
        for validinterface in validinterfaces:
            store.append ([validinterface])

        # Build the UI aspects of the ComboBox, passing the interface clicked in the trayicon
        # as the interface that needs to be the active one when the combo box is drawn
        activeComboBoxObjectIndex = validinterfaces.index(f"{defaultactiveint}")
        interfaceComboBox.set_model(store)
        interfaceComboBox.set_margin_top(15)
        interfaceComboBox.set_margin_end(30)
        interfaceComboBox.set_active(activeComboBoxObjectIndex)
        interfaceComboBox.connect("changed", self.cbox_config_refresh)

        # Build Label to sit in front of the ComboBox
        labelOne = Gtk.Label(label="Interface:")
        labelOne.set_margin_top(15)
        labelOne.set_margin_start(30)

        # Add both objects to a single box, which will then be added to the grid
        interfaceBox = Gtk.Box(orientation=0, spacing=100)
        interfaceBox.pack_start(labelOne, False, False, 0)
        interfaceBox.pack_end(interfaceComboBox, True, True, 0)

        # Add radio button to toggle DHCP or not
        radioButton1 = Gtk.RadioButton.new_with_label(None, "DHCP")
        radioButton1.set_margin_top(15)
        radioButton2 = Gtk.RadioButton.new_with_label_from_widget(radioButton1, "Manual")
        radioButton2.set_margin_top(15)
        radioButton2.join_group(radioButton1)

        radioButtonLabel = Gtk.Label(label="IPv4 Method:")
        radioButtonLabel.set_margin_top(15)
        radioButtonLabel.set_margin_start(30)

        radioBox = Gtk.Box(orientation=0, spacing=50)
        radioBox.set_homogeneous(False)
        radioBox.pack_start(radioButtonLabel, False, False, 0)
        radioBox.pack_start(radioButton1, True, False, 0)
        radioBox.pack_end(radioButton2, True, True, 0)

        # Add Manual Address Field
        ipInputAddressLabel = Gtk.Label(label="Address")
        ipInputAddressLabel.set_margin_top(15)

        ipInputMaskLabel = Gtk.Label(label="Subnet Mask")
        ipInputMaskLabel.set_margin_top(15)

        ipInputGatewayLabel = Gtk.Label(label="Gateway")
        ipInputGatewayLabel.set_margin_top(15)
        
        ipInputAddressEntry = Gtk.Entry()
        ipInputAddressEntry.set_margin_start(15)
        ipInputMaskEntry = Gtk.Entry()
        ipInputGatewayEntry = Gtk.Entry()
        ipInputGatewayEntry.set_margin_end(15)

        ipInputBox = Gtk.Box(orientation=0, spacing=0)
        ipInputBox.set_homogeneous(True)
        ipInputBox.pack_start(ipInputAddressLabel, False, False, 0)
        ipInputBox.pack_start(ipInputMaskLabel, False, False, 0)
        ipInputBox.pack_start(ipInputGatewayLabel, False, False, 0)

        ipEntryBox = Gtk.Box(orientation=0, spacing=30)
        ipEntryBox.pack_start(ipInputAddressEntry, False, False, 0)
        ipEntryBox.pack_start(ipInputMaskEntry, False, False, 0)
        ipEntryBox.pack_start(ipInputGatewayEntry, False, False, 0)

        # Build the grid, which will handle the physical layout of the UI elements.
        gridOne = Gtk.Grid()
        gridOne.set_column_homogeneous(True)
        gridOne.set_row_homogeneous(False)
        gridOne.set_column_spacing(5)
        gridOne.set_row_spacing(10)
        gridOne.attach(interfaceBox, 0, 0, 4, 1)
        gridOne.attach(radioBox, 0, 1, 4, 1)
        gridOne.attach(ipInputBox, 0, 2, 4, 1)
        gridOne.attach(ipEntryBox, 0, 3, 4, 1)

        # Placeholder for Tab 1 Content
        testbutton2 = Gtk.Button(label="IPv6 Stuff")
        testbutton2.connect("clicked", self.on_button_clicked)

        # Placeholder for Tab 2 Content
        testbutton3 = Gtk.Button(label="VPN Stuff")
        testbutton3.connect("clicked", self.on_button_clicked)

        # Build Notebook
        nb = Gtk.Notebook()
        nb.set_tab_pos(2)
        self.add(nb)

        # Apply Tab 1 content and formatting to the notebook
        nb.append_page(gridOne)
        nb.set_tab_label_text(gridOne, "IPv4 Settings")

        # Apply Tab 2 content and formatting to the notebook
        nb.append_page(testbutton2)
        nb.set_tab_label_text(testbutton2, "IPv6 Settings")

        # Apply Tab 3 content and formatting to the notebook
        nb.append_page(testbutton3)
        nb.set_tab_label_text(testbutton3, "VPN")

    # Need to delete this function before shippint. Placeholder for tab 2/3 functionality.
    def on_button_clicked(self, widget):
        print(f"{widget}")
        print(f"{self}")
        print(f"Hello World")

    # Returns a list of valid configureable interfaces.
    def enumerate_nics(self):
        validnics = list()
        confnotnics = ["lo", "fwe", "fwip", "tap", "plip", "pfsync", "pflog",
        "tun", "sl", "faith", "ppp", "bridge", "ixautomation"]
        confncard = 'ifconfig -l'
        confnics = Popen(confncard, shell=True, stdout=PIPE, close_fds=True, universal_newlines=True)
        confnetcard = confnics.stdout.readlines()[0].rstrip()
        confnetcardarray = confnetcard.split(" ")
        for confnic in confnetcardarray:
            nicgeneralized = re.findall( "[a-zA-Z]+", confnic)
            stringnicgeneralized = str(nicgeneralized).replace("'", "")
            stringnicgeneralized = stringnicgeneralized.replace("[", "")
            stringnicgeneralized = stringnicgeneralized.replace("]", "")
            if stringnicgeneralized in confnotnics:
                print(f"{confnic} was generalized to {nicgeneralized} and was found in the notnics list! "
                "It will not be added to the valid configurable nic list in the netCardConfigWindow.enumerate_nics method.")
            else:
                validnics.append(confnic)
        return(validnics)   
    # Used with the combo box to refresh the UI of tab 1 with active settings for the newly selected active interface.
    def cbox_config_refresh(self, widget):
        refreshedInterface = widget.get_active()
        refreshedInterfaceName = self.enumerate_nics()[refreshedInterface]
        # actions here need to refresh the values on the first tab.
        print(f"Refreshing settings to match current settings on {refreshedInterface}. "
        f"Interface name is {refreshedInterfaceName}")   


def openNetCardConfigwindow(default_int):
    win = netCardConfigWindow(default_int)
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()

if "-auto" in sys.argv:
    autoConfigure()
elif "-configure" in sys.argv:
    confloc = sys.argv.index('-configure')
    intloc = confloc + 1
    passedint = sys.argv[intloc]
    openNetCardConfigwindow(passedint)
else:
    print(f"No acceptable flags were passed to the function.")